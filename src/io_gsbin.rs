use std::collections::HashMap;
use std::fs::File;
use std::io::Read;
const RR: i8 = -1;
const RA: i8 = 0;
const AA: i8 = 1;
const MS: i8 = 0;

fn expand_i32_to_u8_pairs_lsb(input: i32) -> [u8; 16] {
    let mut result = [0u8; 16];
    // Iterate over the 16 pairs of bits in the i32
    for i in 0..16 {
        // Extract the two least significant bits for each u8
        let pair_of_bits = ((input >> (2 * i)) & 0b11) as u8;
        // Store the pair in the result array
        result[i] = pair_of_bits;
    }
    result
}

//#[inline]
fn gtconv(gt: u8) -> (i8, i32) {
    match gt {
        0 => (RR, 1),
        1 => (RA, 1),
        2 => (AA, 1),
        _ => (MS, 0),
    }
}

fn bytes_to_gts(profile_bytes: &[u8], markers: usize, marker_storage: usize) -> (Vec<i8>, i32) {
    let mut snp_start = 0;
    let mut end = snp_start + 4;
    let mut snps = 0;
    let mut gtp: Vec<i8> = Vec::with_capacity(1920);
    let mut informative = 0;
    while snps < marker_storage {
        let res0 = i32::from_le_bytes(profile_bytes[snp_start..end].try_into().expect("nope"));
        snp_start += 4;
        end += 4;
        let res1 = i32::from_le_bytes(profile_bytes[snp_start..end].try_into().expect("nope"));
        snp_start += 4;
        end += 4;
        let res2 = i32::from_le_bytes(profile_bytes[snp_start..end].try_into().expect("nope"));
        snp_start += 4;
        end += 4;
        let res3 = i32::from_le_bytes(profile_bytes[snp_start..end].try_into().expect("nope"));
        snp_start += 4;
        end += 4;
        let gts0: Vec<(i8, i32)> = expand_i32_to_u8_pairs_lsb(res0)
            .into_iter()
            .map(|x| gtconv(x))
            .collect::<Vec<(i8, i32)>>();
        let gts1: Vec<(i8, i32)> = expand_i32_to_u8_pairs_lsb(res1)
            .into_iter()
            .map(|x| gtconv(x))
            .collect::<Vec<(i8, i32)>>();
        let gts2: Vec<(i8, i32)> = expand_i32_to_u8_pairs_lsb(res2)
            .into_iter()
            .map(|x| gtconv(x))
            .collect::<Vec<(i8, i32)>>();
        let gts3: Vec<(i8, i32)> = expand_i32_to_u8_pairs_lsb(res3)
            .into_iter()
            .map(|x| gtconv(x))
            .collect::<Vec<(i8, i32)>>();

        for i in 0..16 {
            gtp.push(gts0[i].0);
            gtp.push(gts1[i].0);
            gtp.push(gts2[i].0);
            gtp.push(gts3[i].0);
            snps += 4;
            informative += gts0[i].1;
            informative += gts1[i].1;
            informative += gts2[i].1;
            informative += gts3[i].1;
        }
    }
    (gtp[0..markers].to_vec(), informative)
}

pub fn read_gs(gsfile: String) -> (HashMap<i32, usize>, Vec<Vec<i8>>, Vec<i32>) {
    let mut fbin = File::open(gsfile).expect("can't read");
    let mut buffer = [0u8; 4];
    let mut meta: Vec<usize> = vec![0; 4];

    /* Load the metadata [Animal Num, Markers, Packed Markers, Blocks] */
    for i in 0..meta.len() {
        fbin.read(&mut buffer).expect("Can't write file");
        meta[i] = i32::from_le_bytes(buffer) as usize;
    }

    let mut anml_idx = vec![0; meta[0]];

    let mut anml_lookup: HashMap<i32, usize> = HashMap::with_capacity(meta[0]);
    /* Store the animal ids by index */
    for i in 0..meta[0] {
        fbin.read(&mut buffer).expect("Can't write file");
        anml_idx[i] = i32::from_le_bytes(buffer);
        anml_lookup.insert(anml_idx[i], i);
    }

    /* Read the genotypes, convert and store */
    let mut mygts: Vec<Vec<i8>> = vec![Vec::with_capacity(meta[2]); meta[0]];
    let mut inform: Vec<i32> = vec![0; meta[0]];
    let mut profile_buffer = [0u8; 480];

    for an in 0..meta[0] {
        fbin.read(&mut profile_buffer).expect("Can't write file");
        let anpro = bytes_to_gts(&profile_buffer, meta[1], meta[2]);
        mygts[an] = anpro.0;
        inform[an] = anpro.1;
    }

    (anml_lookup, mygts, inform)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn gt_conv_bin() {
        let a: [u8; 5] = [0, 1, 2, 3, 4];
        let result = a.map(|b| gtconv(b));
        assert_eq!(result, [(-1i8, 1), (0i8, 1), (1i8, 1), (0i8, 0), (0i8, 0)]);
    }

    #[test]
    fn test_gsbin_reader() {
        let file = "tests/data/test.bin".to_string();
        let (lookup, genotypes, informative) = read_gs(file);
        let true_gt = [[
            0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0,
            0, 1, -1, 0, -1, -1, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 1, 0, 0, -1, 0, 0, 0, -1, 1,
            0, 0, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 0, -1, 1, -1, -1, 1, 0, 0, 1, 0, -1, 1,
            0, 1, 0, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, -1, -1, 1, 0, 0, 0, -1, -1, 0, -1,
            1, 1, 0, 0, -1, -1, 0, 1, -1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1, 0, 0,
            -1, -1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, -1, 0, 1, -1, 1, 0, 0, -1,
            -1, 0, 0, -1, 0, 0, -1, 0, -1, 0, 1, -1, -1, 0, 1, 1, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0,
            0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 0, 1, 1, -1, -1, -1,
            1, -1, 1, -1, 0, 0, 1, 0, 0, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 0, -1, 1, 0, 0, 0, 1,
            1, 0, 1, 0, 1, 0, 0, 0, -1, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, -1, 1, 0, -1, 1, -1, 0, -1,
            1, -1, 0, 1, 0, 0, 0, 1, -1, 0, 0, 0, -1, 0, -1, 0, -1, 1, 1, -1, 0, 0, 1, -1, 1, 0, 0,
            1, 1, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 1, 1, -1, 1, -1, 0, 0, 0, 1, 0, 0, 0, 0,
            -1, 0, -1, -1, 0, 1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, -1, -1, 0, 1,
            0, 0, 1, -1, -1, -1, -1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, -1, -1, -1,
            1, 0, 0, 1, 1, 1, -1, 1, 0, 1, 0, 1, 1, 0, 1, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 0, -1,
            1, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 1, 0, 0, 0, -1, 1, 0, 0, -1, 1, 1, 1, 0, 0, 1,
            1, 0, -1, -1, -1, 0, 1, -1, 1, 1, -1, -1, 1, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1, -1, -1,
            0, 0, 0, -1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, 1, 0, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0,
            -1, -1, -1, -1, 0, 0, 0, -1, 0, 0, -1, 1, -1, -1, 0, -1, 0, 0, -1, 1, -1, -1, 1, 0, 1,
            0, -1, -1, -1, 1, -1, 1, 0, 0, 0, 0, 1, 0, 0, -1, -1, 1, -1, 0, 0, 0, 0, 1, 1, -1, -1,
            1, 0, 1, 1, 0, 0, 0, 0, -1, 1, -1, -1, 0, -1, -1, -1, 1, 1, 0, 0, -1, -1, 1, 1, 0, -1,
            1, 1, -1, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 1,
            0, 0, -1, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, -1, 1, -1, 0, 0, -1, -1, 0, 0,
            0, 1, 1, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, -1, 1, 1, -1, 0, 0, 0, 1, 0, 0, 1, -1, -1,
            1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, -1, 1, 0, 0, 1, 0, 1, 0, 1, 1, -1, -1, 0, -1,
            0, 0, 0, 1, -1, -1, -1, 0, 0, 0, -1, 1, 0, 0, -1, -1, 1, 0, 1, 0, 0, 0, -1, 0, 0, 0, 1,
            0, 0, 0, -1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, -1, 0, 0, 0, 0, -1, 0, 0,
            0, 1, 1, 1, -1, 1, 0, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 0, -1, 1, 0, 1, -1, 0, 1, 0,
            0, 0, -1, 0, 0, 0, 1, 1, 1, 1, 0, -1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, -1, -1, 1,
            0, 0, -1, 1, 1, 0, -1, 1, 0, -1, 0, 1, 1, 0, 1, 0, -1, 1, 0, 0, -1, 0, -1, 0, -1, 0,
            -1, 0, 1, 0, 0, 0, 0, 1, -1, 0, 1, 0, 0, 1, 0, 1, 1, 0, -1, -1, 0, 0, -1, -1, -1, 0, 0,
            0, 1, -1, 0, -1, 1, 1, 0, 0, -1, -1, -1, 1, 0, -1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1,
            0, 0, 1, 0, 1, 0, 0, 0, 0, 1, -1, -1, 0, 0, 0, 0, 0, -1, 0, 1, 1, 1, -1, 0, -1, 0, 0,
            0, 0, 0, 0, -1, -1, 0, 0, 0, -1, -1, 1, -1, 0, 0, -1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,
            0, 1, 0, 0, 0, 0, -1, -1, 1, -1, 0, 0, 1, 1, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 0, -1, 0,
            0, 1, 0, 0, 0, 0, -1, 1, 0, 0, -1, -1, 0, 0, -1, 1, 0, 0, 0, -1, 1, 1, -1, 0, 1, 0, 0,
            -1, 0, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, 0, 0, 0, -1,
            0, 0, 0, -1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, -1, 0, 1, 1, 0, 1, 1, 0, 0, -1, 1, 1, 0,
            0, 0, 1, -1, 0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, 0, 1, 0, 1, 0, 1, -1, 1, 1, 1, 0,
            -1, 0, 1, 1, -1, -1, 0, -1, 1, -1, -1, -1, 1, 0, 1, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, 0,
            0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, -1, 1, 0, -1, 1, 1, -1, -1, 1, -1, 1, -1, 0, -1, 0, 0,
            0, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 0, 0, -1, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, 0,
            0, -1, 0, 1, 0, 1, -1, 1, -1, 0, -1, 1, 0, 0, -1, -1, -1, 0, 1, 1, 1, -1, 0, 1, 1, -1,
            0, 1, -1, 1, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, -1, 0, 1, 0, 0, 0, -1,
            1, 1, 0, 0, 0, 1, 0, 0, -1, 0, -1, -1, 1, 0, 0, -1, 0, 0, 0, -1, -1, -1, 1, -1, -1, 0,
            0, 1, 0, 0, 1, 0, -1, 0, -1, 0, 0, 1, 0, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 0, 0, 0, 1,
            0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, -1,
            0, 1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, -1, 1, 0, 0, 1, 1, 0, -1,
            1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, -1, 1, 0, -1, 1, 1, 1, -1, -1, 0,
            0, 1, -1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, -1, 0, -1, 0, -1, 1, -1, 1, -1, 0, 0, 1,
            0, 1, 0, 1, -1, -1, -1, -1, -1, 1, 1, 0, -1, 0, -1, -1, 1, 0, -1, 0, 0, 0, 0, -1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 1, 1, -1, 0, 1, -1, 1, 1, -1, 0, 0, -1, 1, -1, 1,
            -1, -1, -1, 1, 0, 0, 0, 1, 0, 0, -1, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1,
            0, -1, 1, 0, -1, -1, -1, -1, 1, 1, -1, 1, -1, 0, 1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 1,
            -1, -1, -1, 1, 0, -1, -1, 0, -1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, -1, 0, 0, 0, -1,
            1, 1, -1, -1, 0, 1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, -1, 0, 0,
            -1, 0, 0, 0, 0, 1, 1, 0, 0, 1, -1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, -1, 0, 0, 0, 0,
            1, 1, 1, -1, 1, -1, 1, 0, 1, 0, -1, 1, 0, 0, -1, 0, 1, 0, 1, 0, -1, 1, -1, -1, 0, 1, 1,
            0, -1, -1, 0, 1, 0, -1, 1, 0, 1, 0, -1, 1, 1, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0,
            -1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1,
            0, -1, 0, -1, -1, 0, -1, -1, 1, 0, -1, 0, 0, 0, 0, -1, 1, 1, 0, 0, 1, -1, 0, 1, 0, 1,
            0, 0, -1, 1, -1, -1, 0, 0, 0, -1, 0, -1, 1, 1, -1, -1, 1, -1, -1, 1, 0, -1, 0, 0, 0, 1,
            0, 0, 0, 0, -1, -1, 0, 0, -1, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 1, 1, -1, 0, 1, 0, 1, 0,
            0, -1, -1, 1, -1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 1, 1, -1, -1,
            -1, 1, -1, 1, 1, 1, -1, -1, 1, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1,
            -1, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 0, -1, 0, 0, -1, -1, -1, 0, 1, 1, 0, -1,
            0, -1, 0, -1, -1, -1, 1, -1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, -1, 0, 0, -1,
            1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, -1, -1, 1, 0, -1, 0, -1, 0, -1, -1, -1, 1,
            0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, -1, 1, 0, 1, -1, -1, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0,
            1, 1, 0, -1, 0, 0, 1, -1, -1, 1, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 1, -1, 0, 1, 0, -1, -1, 1, 1, 1, 0, 1, 1, -1, 1, 1, -1,
            0, 0, 0, 1, 1, 0, -1, 0, -1, 0, 1, 0, 1, 0,
        ]];
        assert!(lookup.contains_key(&1439)); //Assert we get the correct sample id
        assert_eq!(genotypes, true_gt); // Check we get the correct genotypes
        assert_eq!(1857, informative[0]); //Check get the correct number of informative markers
    }
}
